name: Monitoring and Notifications

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每天早上8点发送日报
    - cron: '0 8 * * *'
    # 每周一早上9点发送周报
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      notification-type:
        description: 'Notification type'
        required: true
        default: 'daily-report'
        type: choice
        options:
          - daily-report
          - weekly-report
          - monthly-report
          - custom
      channels:
        description: 'Notification channels (comma separated)'
        required: true
        default: 'github,slack'
        type: string

env:
  NODE_VERSION: '18'

jobs:
  # 项目健康状态监控
  health-monitoring:
    name: Project Health Monitoring
    runs-on: ubuntu-latest
    outputs:
      health-score: ${{ steps.health.outputs.score }}
      status: ${{ steps.health.outputs.status }}
      issues: ${{ steps.health.outputs.issues }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Calculate project health score
        id: health
        run: |
          node scripts/calculate-health-score.js \
            --output health-score.json

          SCORE=$(cat health-score.json | jq -r '.overall_score')
          STATUS=$(cat health-score.json | jq -r '.status')
          ISSUES=$(cat health-score.json | jq -r '.total_issues')

          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "issues=$ISSUES" >> $GITHUB_OUTPUT

      - name: Generate health dashboard
        run: |
          node scripts/generate-health-dashboard.js \
            --input health-score.json \
            --output health-dashboard.html

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: health-report
          path: |
            health-score.json
            health-dashboard.html
          retention-days: 7

  # 性能指标监控
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: health-monitoring
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        run: |
          npm run build
          npm run test:performance

      - name: Analyze performance metrics
        run: |
          node scripts/analyze-performance-trends.js \
            --input test-results/performance/ \
            --baseline performance-baseline.json \
            --output performance-trends.json

      - name: Check performance regressions
        run: |
          node scripts/check-performance-regressions.js \
            --current performance-trends.json \
            --thresholds performance-thresholds.json \
            --output performance-regressions.json

      - name: Generate performance report
        run: |
          node scripts/generate-performance-report.js \
            --input performance-trends.json \
            --output performance-report.html

      - name: Upload performance metrics
        uses: actions/upload-artifact@v4
        with:
          name: performance-metrics
          path: |
            performance-trends.json
            performance-regressions.json
            performance-report.html
          retention-days: 7

  # 依赖更新监控
  dependency-monitoring:
    name: Dependency Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check for outdated dependencies
        run: |
          npm outdated --json > outdated-dependencies.json 2>/dev/null || echo '{}' > outdated-dependencies.json

          # 生成依赖报告
          node scripts/generate-dependency-report.js \
            --input outdated-dependencies.json \
            --output dependency-report.html

          # 检查是否有主要版本更新
          node scripts/check-major-updates.js \
            --input outdated-dependencies.json \
            --output major-updates.json

      - name: Check for security advisories
        run: |
          npm audit --json > security-advisories.json 2>/dev/null || echo '{}' > security-advisories.json

          node scripts/analyze-security-advisories.js \
            --input security-advisories.json \
            --output security-advisory-report.html

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-monitoring
          path: |
            outdated-dependencies.json
            major-updates.json
            security-advisories.json
            dependency-report.html
            security-advisory-report.html
          retention-days: 7

  # 代码质量趋势监控
  quality-trend-monitoring:
    name: Quality Trend Monitoring
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Analyze code quality trends
        run: |
          node scripts/analyze-quality-trends.js \
            --git-range="HEAD~10..HEAD" \
            --output quality-trends.json

      - name: Generate quality trend dashboard
        run: |
          node scripts/generate-quality-trend-dashboard.js \
            --input quality-trends.json \
            --output quality-trend-dashboard.html

      - name: Check quality degradation
        run: |
          node scripts/check-quality-degradation.js \
            --current quality-trends.json \
            --thresholds quality-thresholds.json \
            --output quality-degradation.json

      - name: Upload quality trend reports
        uses: actions/upload-artifact@v4
        with:
          name: quality-trends
          path: |
            quality-trends.json
            quality-trend-dashboard.html
            quality-degradation.json
          retention-days: 7

  # 通知聚合和发送
  notification-aggregation:
    name: Notification Aggregation
    runs-on: ubuntu-latest
    needs: [health-monitoring, performance-monitoring, dependency-monitoring, quality-trend-monitoring]
    if: always() && !cancelled()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all monitoring reports
        uses: actions/download-artifact@v4
        with:
          path: monitoring-reports/

      - name: Aggregate monitoring data
        run: |
          node scripts/aggregate-monitoring-data.js \
            --input-dir monitoring-reports \
            --output monitoring-summary.json \
            --project-name "Taro Bluetooth Print v2.0"

      - name: Generate notification content
        run: |
          node scripts/generate-notification-content.js \
            --input monitoring-summary.json \
            --type "${{ github.event.inputs.notification-type || 'daily-report' }}" \
            --output notification-content.json

      - name: Send GitHub notification
        if: contains(github.event.inputs.channels, 'github') || github.event.inputs.channels == ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const content = JSON.parse(fs.readFileSync('monitoring-reports/notification-content.json', 'utf8'));

              if (github.event_name === 'pull_request') {
                // PR评论
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: content.github.pr_comment
                });
              } else if (github.event_name === 'push' && github.ref == 'refs/heads/main') {
                // 创建commit状态
                github.rest.repos.createCommitStatus({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  sha: context.sha,
                  state: content.github.status.state,
                  target_url: content.github.status.target_url,
                  description: content.github.status.description,
                  context: 'monitoring/health-check'
                });
              }

            } catch (error) {
              console.log('Failed to send GitHub notification:', error.message);
            }

      - name: Send Slack notification
        if: contains(github.event.inputs.channels, 'slack') && env.SLACK_WEBHOOK_URL != ''
        run: |
          node scripts/send-slack-notification.js \
            --webhook "${{ secrets.SLACK_WEBHOOK_URL }}" \
            --content monitoring-reports/notification-content.json

      - name: Send Email notification
        if: contains(github.event.inputs.channels, 'email') && env.SMTP_CONFIG != ''
        run: |
          node scripts/send-email-notification.js \
            --config "${{ secrets.SMTP_CONFIG }}" \
            --content monitoring-reports/notification-content.json

      - name: Send Discord notification
        if: contains(github.event.inputs.channels, 'discord') && env.DISCORD_WEBHOOK_URL != ''
        run: |
          node scripts/send-discord-notification.js \
            --webhook "${{ secrets.DISCORD_WEBHOOK_URL }}" \
            --content monitoring-reports/notification-content.json

      - name: Update monitoring dashboard
        if: github.ref == 'refs/heads/main'
        run: |
          node scripts/update-monitoring-dashboard.js \
            --input monitoring-summary.json \
            --output monitoring-dashboard.html

      - name: Deploy monitoring dashboard
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: monitoring-dashboard.html
          destination_dir: monitoring

  # 自动化问题创建
  automated-issue-creation:
    name: Automated Issue Creation
    runs-on: ubuntu-latest
    needs: notification-aggregation
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Download monitoring data
        uses: actions/download-artifact@v4
        with:
          name: monitoring-summary
          path: monitoring-data/

      - name: Create automated issue for failures
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const monitoringData = JSON.parse(fs.readFileSync('monitoring-data/monitoring-summary.json', 'utf8'));

              // 检查是否有严重问题需要创建issue
              if (monitoringData.health_score < 50 ||
                  monitoringData.performance_regressions.length > 0 ||
                  monitoringData.critical_security_issues > 0) {

                const issueTitle = `🚨 自动化监控警报 - ${new Date().toLocaleDateString('zh-CN')}`;
                const issueBody = this.generateIssueBody(monitoringData);

                // 检查是否已有类似的open issue
                const existingIssues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  labels: ['monitoring', 'auto-generated']
                });

                const similarIssue = existingIssues.data.find(issue =>
                  issue.title.includes('自动化监控警报')
                );

                if (!similarIssue) {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: issueTitle,
                    body: issueBody,
                    labels: ['monitoring', 'auto-generated', 'high-priority']
                  });

                  console.log('Created automated issue for monitoring alerts');
                } else {
                  // 更新现有issue
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: similarIssue.number,
                    body: `## 📊 监控更新 (${new Date().toLocaleString('zh-CN')})\n\n${issueBody}`
                  });

                  console.log('Updated existing monitoring issue');
                }
              }

            } catch (error) {
              console.log('Failed to create automated issue:', error.message);
            }

  generateIssueBody(monitoringData) {
    let body = `## 📊 项目健康状态警报\n\n`;
    body += `**健康评分**: ${monitoringData.health_score}/100 (${monitoringData.health_status})\n\n`;

    if (monitoringData.critical_issues > 0) {
      body += `### 🚨 严重问题 (${monitoringData.critical_issues}个)\n\n`;
      monitoringData.issues.filter(issue => issue.severity === 'critical').forEach(issue => {
        body += `- **${issue.category}**: ${issue.description}\n`;
      });
      body += '\n';
    }

    if (monitoringData.performance_regressions.length > 0) {
      body += `### 📉 性能回归\n\n`;
      monitoringData.performance_regressions.forEach(regression => {
        body += `- **${regression.metric}**: ${regression.change}%\n`;
      });
      body += '\n';
    }

    body += `### 🔗 相关链接\n`;
    body += `- [监控仪表板](https://${{ github.repository }}.github.io/monitoring)\n`;
    body += `- [详细报告](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n\n`;

    body += `### 📋 建议行动\n`;
    body += `1. 查看详细的监控报告\n`;
    body += `2. 优先处理严重问题\n`;
    body += `3. 评估性能回归的影响\n`;
    body += `4. 制定改进计划\n\n`;

    body += `---\n`;
    body += `*此issue由监控系统自动生成*`;

    return body;
  }