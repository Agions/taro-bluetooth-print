name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # 每周一凌晨2点运行
    - cron: '0 2 * * 1'

jobs:
  # 综合代码质量检查
  quality-check:
    name: Comprehensive Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: |
          npm run lint -- --format=json --output-file=eslint-report.json
          npm run lint -- --format=checkstyle --output-file=eslint-checkstyle.xml

      - name: Run Prettier check
        run: |
          npm run format -- --check
          npx prettier --check 'src/**/*.{ts,tsx,js,jsx,json,md,yml}' > prettier-report.txt 2>&1 || true

      - name: Run TypeScript check
        run: |
          npx tsc --noEmit --pretty false > typecheck-report.txt 2>&1 || true

      - name: Calculate code complexity
        run: |
          npx complexity-report --output json --format json src/ > complexity-report.json 2>/dev/null || echo '{}' > complexity-report.json

      - name: Run SonarCloud scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload quality reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-reports
          path: |
            eslint-report.json
            eslint-checkstyle.xml
            prettier-report.txt
            typecheck-report.txt
            complexity-report.json

  # 依赖安全检查
  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --json > audit-report.json 2>/dev/null || echo '{}' > audit-report.json
          npm audit --audit-level=moderate

      - name: Check for outdated dependencies
        run: npm outdated --json > outdated-report.json 2>/dev/null || echo '{}' > outdated-report.json

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            audit-report.json
            outdated-report.json
            .snyk

  # 许可证检查
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check licenses
        run: |
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' --summary > license-summary.txt 2>/dev/null || true
          npx license-checker --json > license-report.json 2>/dev/null || true

      - name: Upload license reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-reports
          path: |
            license-summary.txt
            license-report.json

  # 代码覆盖率质量检查
  coverage-quality:
    name: Coverage Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Check coverage thresholds
        run: ./scripts/coverage-monitor.sh --check-thresholds --lines 80 --functions 80 --branches 75 --statements 80

      - name: Generate coverage report
        run: npm run coverage:report

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage/
            coverage/reports/

  # 性能基准测试
  performance-benchmark:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run performance tests
        run: npm run test:performance

      - name: Analyze bundle size
        run: |
          npm run analyze
          npx bundlesize

      - name: Bundle size comparison
        run: |
          if [ -f "bundle-size.json" ]; then
            node scripts/compare-bundle-size.js
          fi

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: |
            bundle-analysis.html
            test-results/performance/
            bundle-size.json

  # 文档质量检查
  documentation-check:
    name: Documentation Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for TODO/FIXME comments
        run: |
          grep -r "TODO\|FIXME" src/ > todo-comments.txt 2>/dev/null || echo "No TODO/FIXME comments found" > todo-comments.txt

      - name: Check documentation coverage
        run: |
          npx typedoc --excludePrivate --excludeProtected --output docs-api src/
          find docs-api -name "*.html" | wc -l > doc-coverage-count.txt

      - name: Validate markdown files
        run: |
          find . -name "*.md" -not -path "./node_modules/*" -not -path "./.git/*" | xargs npx markdownlint-cli2 > markdownlint-report.txt 2>/dev/null || true

      - name: Upload documentation reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: documentation-reports
          path: |
            todo-comments.txt
            doc-coverage-count.txt
            markdownlint-report.txt
            docs-api/

  # 质量门禁检查
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [quality-check, dependency-check, license-check, coverage-quality, performance-benchmark, documentation-check]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Evaluate quality metrics
        run: |
          # 质量门禁检查
          node scripts/quality-gate.js --config=quality-gate.config.json --verbose

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let commentBody = '## 🔍 代码质量报告\n\n';

            // 添加ESLint结果
            if (fs.existsSync('artifacts/quality-reports/eslint-report.json')) {
              const eslintData = JSON.parse(fs.readFileSync('artifacts/quality-reports/eslint-report.json', 'utf8'));
              commentBody += `### 📋 ESLint\n`;
              commentBody += `- 错误: ${eslintData.length}\n`;
              commentBody += `- 状态: ${eslintData.length === 0 ? '✅ 通过' : '❌ 需要修复'}\n\n`;
            }

            // 添加覆盖率结果
            if (fs.existsSync('artifacts/coverage-reports/coverage/coverage-summary.json')) {
              const coverageData = JSON.parse(fs.readFileSync('artifacts/coverage-reports/coverage/coverage-summary.json', 'utf8'));
              commentBody += `### 📊 测试覆盖率\n`;
              commentBody += `- 行覆盖: ${coverageData.total.lines.pct}%\n`;
              commentBody += `- 函数覆盖: ${coverageData.total.functions.pct}%\n`;
              commentBody += `- 分支覆盖: ${coverageData.total.branches.pct}%\n`;
              commentBody += `- 语句覆盖: ${coverageData.total.statements.pct}%\n\n`;
            }

            // 添加安全扫描结果
            if (fs.existsSync('artifacts/security-reports/audit-report.json')) {
              const auditData = JSON.parse(fs.readFileSync('artifacts/security-reports/audit-report.json', 'utf8'));
              const vulnerabilities = auditData.vulnerabilities || {};
              const totalVulns = Object.keys(vulnerabilities).length;
              commentBody += `### 🔒 安全扫描\n`;
              commentBody += `- 漏洞数量: ${totalVulns}\n`;
              commentBody += `- 状态: ${totalVulns === 0 ? '✅ 安全' : '⚠️ 需要关注'}\n\n`;
            }

            if (commentBody !== '## 🔍 代码质量报告\n\n') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }

      - name: Generate comprehensive test report
        run: |
          # 生成综合测试报告
          node scripts/generate-test-report.js --project-name="Taro Bluetooth Print" --output-dir=test-reports

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-test-reports
          path: |
            test-reports/
            quality-gate-reports/

      - name: Set quality gate status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            // 这里可以根据质量检查结果设置PR状态
            // 例如：要求所有检查通过才能合并