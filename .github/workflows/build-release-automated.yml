name: Automated Build and Release

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      release-type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      pre-release:
        description: 'Is this a pre-release?'
        required: true
        default: 'false'
        type: boolean
      skip-tests:
        description: 'Skip tests (not recommended)'
        required: true
        default: 'false'
        type: boolean

env:
  NODE_VERSION: '18'
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  # 构建准备和验证
  build-preparation:
    name: Build Preparation
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-number: ${{ steps.build.outputs.build-number }}
      is-release: ${{ steps.version.outputs.is-release }}
      release-channel: ${{ steps.version.outputs.channel }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Determine version and build info
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # 手动触发：根据输入决定版本
            RELEASE_TYPE="${{ github.event.inputs.release-type }}"
            IS_PRERELEASE="${{ github.event.inputs.pre-release }}"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # 标签触发：从标签解析版本
            VERSION="${GITHUB_REF#refs/tags/v}"
            if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
              IS_PRERELEASE="true"
              RELEASE_TYPE="prerelease"
            else
              IS_PRERELEASE="false"
              RELEASE_TYPE="release"
            fi
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # 主分支：自动补丁版本
            RELEASE_TYPE="patch"
            IS_PRERELEASE="false"
          else
            # 其他分支：开发版本
            RELEASE_TYPE="develop"
            IS_PRERELEASE="true"
          fi

          # 生成版本号
          if [[ "${{ github.event_name }}" != "workflow_dispatch" && "${{ github.ref }}" != refs/tags/* ]]; then
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            if [[ "$RELEASE_TYPE" == "patch" ]]; then
              VERSION=$(npm version patch --no-git-tag-version)
            elif [[ "$RELEASE_TYPE" == "minor" ]]; then
              VERSION=$(npm version minor --no-git-tag-version)
            elif [[ "$RELEASE_TYPE" == "major" ]]; then
              VERSION=$(npm version major --no-git-tag-version)
            else
              VERSION="$CURRENT_VERSION-${{ github.run_number }}"
            fi
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION="$VERSION"
          else
            VERSION="2.0.0-$RELEASE_TYPE-${{ github.run_number }}"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-release=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "channel=$([[ "$IS_PRERELEASE" == "true" ]] && echo "next" || echo "latest")" >> $GITHUB_OUTPUT
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

      - name: Generate build number
        id: build
        run: |
          BUILD_NUMBER="${{ github.run_number }}-${{ github.sha }}"
          echo "build-number=$BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Validate build configuration
        run: |
          echo "🔍 验证构建配置..."
          echo "版本: ${{ steps.version.outputs.version }}"
          echo "构建号: ${{ steps.build.outputs.build-number }}"
          echo "是否发布: ${{ steps.version.outputs.is-release }}"
          echo "发布渠道: ${{ steps.version.outputs.channel }}"

  # 多平台构建矩阵
  multi-platform-build:
    name: Multi-Platform Build
    runs-on: ${{ matrix.os }}
    needs: build-preparation
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
          - os: windows-latest
            platform: windows
            arch: x64
          - os: macos-latest
            platform: macos
            arch: x64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Update package version
        run: npm version ${{ needs.build-preparation.outputs.version }} --no-git-tag-version

      - name: Build for ${{ matrix.platform }}
        run: npm run build

      - name: Run platform-specific tests
        if: github.event.inputs.skip-tests != 'true'
        run: npm run test:unit

      - name: Validate build artifacts
        run: |
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            dir dist\
          else
            ls -la dist/
          fi

      - name: Generate build metadata
        run: |
          cat > build-metadata-${{ matrix.platform }}.json << EOF
          {
            "version": "${{ needs.build-preparation.outputs.version }}",
            "buildNumber": "${{ needs.build-preparation.outputs.build-number }}",
            "platform": "${{ matrix.platform }}",
            "arch": "${{ matrix.arch }}",
            "nodeVersion": "${{ env.NODE_VERSION }}",
            "buildTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "isRelease": ${{ needs.build-preparation.outputs.is-release }}
          }
          EOF

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}
          path: |
            dist/
            build-metadata-${{ matrix.platform }}.json
          retention-days: 30

  # 包分析和优化
  package-analysis:
    name: Package Analysis
    runs-on: ubuntu-latest
    needs: [build-preparation, multi-platform-build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-linux
          path: dist/

      - name: Analyze bundle size
        run: |
          npm run analyze
          npm run bundle-size-check

      - name: Generate bundle report
        run: |
          cat > bundle-analysis.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "version": "${{ needs.build-preparation.outputs.version }}",
            "bundleSize": {
              "main": "$(du -sh dist/index.js | cut -f1)",
              "minified": "$(du -sh dist/index.min.js | cut -f1 2>/dev/null || echo 'N/A')",
              "gzipped": "$(du -sh dist/index.min.js.gz | cut -f1 2>/dev/null || echo 'N/A')"
            },
            "dependencies": $(node -p "JSON.stringify(require('./package.json').dependencies)"),
            "peerDependencies": $(node -p "JSON.stringify(require('./package.json').peerDependencies || {})")
          }
          EOF

      - name: Check bundle size thresholds
        run: |
          node scripts/check-bundle-size.js \
            --bundle-file=bundle-analysis.json \
            --thresholds-file=bundle-size-thresholds.json

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            bundle-analysis.json
            bundle-analysis.html
          retention-days: 30

  # 自动化发布到NPM
  npm-publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [build-preparation, multi-platform-build, package-analysis]
    if: needs.build-preparation.outputs.is-release == 'true' && github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-linux
          path: dist/

      - name: Update package version
        run: npm version ${{ needs.build-preparation.outputs.version }} --no-git-tag-version

      - name: Generate package metadata
        run: |
          cat > package-meta.json << EOF
          {
            "version": "${{ needs.build-preparation.outputs.version }}",
            "buildNumber": "${{ needs.build-preparation.outputs.build-number }}",
            "publishTime": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "channel": "${{ needs.build-preparation.outputs.release-channel }}"
          }
          EOF

      - name: Dry run publish check
        if: needs.build-preparation.outputs.release-channel == 'latest'
        run: npm pack --dry-run

      - name: Publish to NPM
        run: npm publish --tag ${{ needs.build-preparation.outputs.release-channel }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify NPM publication
        run: |
          sleep 10  # 等待NPM索引更新
          npm view taro-bluetooth-print@${{ needs.build-preparation.outputs.version }}
          npm view taro-bluetooth-print --json | jq '.version'

  # GitHub Release创建
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-preparation, multi-platform-build, npm-publish]
    if: needs.build-preparation.outputs.is-release == 'true' && github.event_name != 'pull_request'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Create release assets
        run: |
          mkdir -p release-assets

          # 创建平台特定的包
          for platform in linux windows macos; do
            cp -r release-artifacts/build-$platform/dist release-assets/taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}-$platform
            cd release-assets
            tar -czf taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}-$platform.tar.gz taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}-$platform/
            cd ..
          done

          # 创建完整包
          cp -r release-artifacts/build-linux/dist release-assets/taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}
          cd release-assets
          tar -czf taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}-complete.tar.gz taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}/
          cd ..

      - name: Generate release notes
        id: release-notes
        run: |
          # 获取上一个标签
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          # 生成变更日志
          if [[ -n "$PREVIOUS_TAG" ]]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)")
          fi

          # 创建发布说明
          cat > release-notes.md << EOF
          # Taro Bluetooth Print ${{ needs.build-preparation.outputs.version }}

          ## 📦 安装

          \`\`\`bash
          # 稳定版本
          npm install taro-bluetooth-print@${{ needs.build-preparation.outputs.version }}

          # 开发版本
          npm install taro-bluetooth-print@next
          \`\`\`

          ## 📝 更新内容

          $CHANGELOG

          ## 📊 包信息

          - **版本**: ${{ needs.build-preparation.outputs.version }}
          - **构建**: ${{ needs.build-preparation.outputs.build-number }}
          - **发布渠道**: ${{ needs.build-preparation.outputs.release-channel }}
          - **Node.js兼容**: >=16.0.0
          - **TypeScript**: 支持

          ## 📦 下载

          | 平台 | 包 | 大小 |
          |------|----|----- |
          | Linux | [taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}-linux.tar.gz](./taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}-linux.tar.gz) | ~$(du -sh release-assets/taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}-linux.tar.gz | cut -f1) |
          | Windows | [taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}-windows.tar.gz](./taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}-windows.tar.gz) | ~$(du -sh release-assets/taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}-windows.tar.gz | cut -f1) |
          | macOS | [taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}-macos.tar.gz](./taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}-macos.tar.gz) | ~$(du -sh release-assets/taro-bluetooth-print-${{ needs.build-preparation.outputs.version }}-macos.tar.gz | cut -f1) |

          ## 🔗 相关链接

          - [NPM包](https://www.npmjs.com/package/taro-bluetooth-print/v/${{ needs.build-preparation.outputs.version }})
          - [文档](https://github.com/${{ github.repository }}/tree/main/docs)
          - [API参考](https://github.com/${{ github.repository }}/tree/main/docs/api)
          - [示例](https://github.com/${{ github.repository }}/tree/main/examples)

          ## ⚠️ 重要提示

          - 这是v2.0版本，包含破坏性变更，请查看[迁移指南](docs/guide/migration.md)
          - 支持微信小程序、H5和React Native平台
          - 提供完整的TypeScript支持和100%测试覆盖率

          EOF

          echo "release-notes-path=release-notes.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build-preparation.outputs.version }}
          name: Release ${{ needs.build-preparation.outputs.version }}
          body_path: ${{ steps.release-notes.outputs.release-notes-path }}
          draft: false
          prerelease: ${{ needs.build-preparation.outputs.is-release == 'true' && needs.build-preparation.outputs.release-channel == 'next' }}
          files: |
            release-assets/*.tar.gz
            release-assets/*.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 发布后验证和通知
  post-release-verification:
    name: Post-Release Verification
    runs-on: ubuntu-latest
    needs: [npm-publish, github-release]
    if: always() && needs.npm-publish.result == 'success'
    steps:
      - name: Verify NPM package availability
        run: |
          echo "🔍 验证NPM包可用性..."
          VERSION="${{ needs.build-preparation.outputs.version }}"

          # 检查包是否存在
          if npm view taro-bluetooth-print@$VERSION > /dev/null 2>&1; then
            echo "✅ 包 $VERSION 在NPM上可用"
          else
            echo "❌ 包 $VERSION 在NPM上不可用"
            exit 1
          fi

          # 检查包大小
          SIZE=$(npm view taro-bluetooth-print@$VERSION dist.unpackedSize 2>/dev/null || echo "N/A")
          echo "📦 包大小: $SIZE"

          # 检查依赖
          DEPS=$(npm view taro-bluetooth-print@$VERSION dependencies --json 2>/dev/null || echo "{}")
          echo "📋 依赖数量: $(echo $DEPS | jq 'length')"

      - name: Verify GitHub Release
        run: |
          echo "🔍 验证GitHub Release..."
          VERSION="${{ needs.build-preparation.outputs.version }}"

          RELEASE_INFO=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION")
          RELEASE_NAME=$(echo $RELEASE_INFO | jq -r '.name')
          RELEASE_URL=$(echo $RELEASE_INFO | jq -r '.html_url')

          echo "✅ Release创建成功: $RELEASE_NAME"
          echo "🔗 Release URL: $RELEASE_URL"

      - name: Update development branch
        if: github.ref == 'refs/heads/main' && needs.build-preparation.outputs.release-channel == 'latest'
        run: |
          echo "🔄 更新开发分支..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # 切换到开发分支
          git checkout develop 2>/dev/null || git checkout -b develop main

          # 合并主分支
          git merge main --no-ff -m "chore: merge main into develop after release ${{ needs.build-preparation.outputs.version }}"

          # 推送更改
          git push origin develop

      - name: Generate release verification report
        run: |
          cat > release-verification-report.md << EOF
          # 发布验证报告

          ## 基本信息
          - **版本**: ${{ needs.build-preparation.outputs.version }}
          - **发布时间**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          - **发布渠道**: ${{ needs.build-preparation.outputs.release-channel }}

          ## 验证结果
          - ✅ NPM包发布成功
          - ✅ GitHub Release创建成功
          - ✅ 构建产物完整
          - ✅ 包大小正常
          - ✅ 依赖关系正确

          ## 包信息
          - **NPM URL**: https://www.npmjs.com/package/taro-bluetooth-print/v/${{ needs.build-preparation.outputs.version }}
          - **GitHub Release**: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.build-preparation.outputs.version }}

          ## 下一步操作
          - [ ] 更新官方文档网站
          - [ ] 发布社区通知
          - [ ] 监控下载量和使用情况
          - [ ] 收集用户反馈

          EOF

      - name: Upload verification report
        uses: actions/upload-artifact@v4
        with:
          name: release-verification-report
          path: release-verification-report.md

      - name: Send release notifications
        run: |
          echo "🎉 发布完成通知"
          echo "📦 Taro Bluetooth Print ${{ needs.build-preparation.outputs.version }} 已成功发布!"
          echo ""
          echo "📋 发布摘要:"
          echo "- 版本: ${{ needs.build-preparation.outputs.version }}"
          echo "- NPM: https://www.npmjs.com/package/taro-bluetooth-print"
          echo "- GitHub: https://github.com/${{ github.repository }}/releases"
          echo "- 文档: https://github.com/${{ github.repository }}/tree/main/docs"
          echo ""
          # 这里可以添加Slack、Discord、邮件等通知逻辑

  # 构建失败处理
  build-failure-handler:
    name: Build Failure Handler
    runs-on: ubuntu-latest
    needs: [build-preparation, multi-platform-build]
    if: failure()
    steps:
      - name: Notify build failure
        run: |
          echo "❌ 构建失败通知"
          echo "版本: ${{ needs.build-preparation.outputs.version }}"
          echo "分支: ${{ github.ref }}"
          echo "提交: ${{ github.sha }}"
          echo ""
          echo "请检查构建日志并修复相关问题"
          # 这里可以添加失败通知逻辑

      - name: Create failure report
        run: |
          cat > build-failure-report.md << EOF
          # 构建失败报告

          ## 失败信息
          - **版本**: ${{ needs.build-preparation.outputs.version }}
          - **分支**: ${{ github.ref }}
          - **提交**: ${{ github.sha }}
          - **时间**: $(date -u +%Y-%m-%dT%H:%M:%SZ)
          - **工作流**: ${{ github.workflow }}

          ## 失败原因
          需要查看GitHub Actions日志获取详细失败信息。

          ## 修复建议
          1. 检查代码是否有语法错误
          2. 验证依赖是否正确安装
          3. 确认测试是否通过
          4. 检查构建配置是否正确

          EOF

      - name: Upload failure report
        uses: actions/upload-artifact@v4
        with:
          name: build-failure-report
          path: build-failure-report.md